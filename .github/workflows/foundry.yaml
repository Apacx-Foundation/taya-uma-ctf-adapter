name: foundry

on:
  pull_request:
    branches:
      - develop
  push:
    branches:
      - develop

env:
  NO_COLOR: 1

defaults:
  run:
    shell: bash

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive

      - uses: foundry-rs/foundry-toolchain@v1

      # - name: Get changed files
      #   id: changed-files
      #   uses: tj-actions/changed-files@v47
      #   with:
      #     files: '**/*.sol'

      - name: Format
        id: fmt
        # run: forge fmt --check ${{ steps.changed-files.outputs.all_changed_files }} >> $GITHUB_STEP_SUMMARY
        continue-on-error: true
        run: |-
          forge fmt --check 2>&1 | tee fmt.log
          echo stdout=$(cat fmt.log) >> $GITHUB_OUTPUT

      - name: Lint
        id: lint
        run: |-
          forge lint --severity=high --severity=gas 2>&1 | tee lint.log
          echo stdout=$(cat lint.log) >> $GITHUB_OUTPUT

      - name: Test
        id: test
        continue-on-error: true
        run: |-
          forge test -vvv 2>&1 | tee test.log
          echo stdout=$(cat test.log) >> $GITHUB_OUTPUT

      - uses: actions/github-script@v8
        if: github.event_name == 'pull_request'
        env:
          FMT: ${{ steps.fmt.outputs.stdout }}
          LINT: ${{ steps.lint.outputs.stdout }}
          TEST: ${{ steps.test.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Prepare format of the comment
            const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
            const run_link = '<a href="' + run_url + '">Actions</a>.'
            const output = `# Foundry CI üìç\`${process.env.GITHUB_REPOSITORY}\`
            #### Format and Style üé®\`${{ steps.fmt.outcome }}\`
            <details><summary>Format and Style Output</summary>

            \`\`\`\n
            ${process.env.FMT}
            \`\`\`

            </details>

            #### Lint üßπ\`${{ steps.lint.outputs.stdout != '' && 'failure' || 'success' }}\`
            <details><summary>Lint Output</summary>

            \`\`\`\n
            ${process.env.LINT}
            \`\`\`

            </details>

            #### Test üß™\`${{ steps.test.outcome }}\`
            <details><summary>Test Output</summary>

            \`\`\`\n
            ${process.env.TEST}
            \`\`\`

            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // Create a comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Fail the ci if any step fails
        if: failure() || steps.lint.outputs.stdout != ''
        run: exit 1
