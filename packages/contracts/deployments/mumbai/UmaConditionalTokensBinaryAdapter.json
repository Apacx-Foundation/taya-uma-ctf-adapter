{
  "address": "0x3549A6e441f1EC5740d8A5941e5Afe111a40238A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "conditionalTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "umaFinderAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "resolutionTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalBond",
          "type": "uint256"
        }
      ],
      "name": "QuestionInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        }
      ],
      "name": "QuestionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "emergencyReport",
          "type": "bool"
        }
      ],
      "name": "QuestionResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        }
      ],
      "name": "QuestionSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        }
      ],
      "name": "QuestionUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalBond",
          "type": "uint256"
        }
      ],
      "name": "ResolutionDataRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "conditionalTokenContract",
      "outputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "payouts",
          "type": "uint256[]"
        }
      ],
      "name": "emergencyReportPayouts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencySafetyPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        }
      ],
      "name": "getExpectedPayouts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identifier",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "resolutionTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "proposalBond",
          "type": "uint256"
        }
      ],
      "name": "initializeQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        }
      ],
      "name": "isQuestionInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        }
      ],
      "name": "pauseQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "questions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "resolutionTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "proposalBond",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "resolutionDataRequested",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "resolved",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "settled",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        }
      ],
      "name": "readyToRequestResolution",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        }
      ],
      "name": "readyToSettle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        }
      ],
      "name": "reportPayouts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        }
      ],
      "name": "requestResolutionData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        }
      ],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "umaFinder",
      "outputs": [
        {
          "internalType": "contract FinderInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        }
      ],
      "name": "unPauseQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x24c239e2d4884b01e3c90c971b6240b8beccca4dade214c0c03f06a99e06e96b",
  "receipt": {
    "to": null,
    "from": "0xa470111768d17c6fA6C935748348FF1974Ca323d",
    "contractAddress": "0x3549A6e441f1EC5740d8A5941e5Afe111a40238A",
    "transactionIndex": 1,
    "gasUsed": "2441834",
    "logsBloom": "0x
    "blockHash": "0xf9b63628b274d323c724a8c9553dea9aa425f84d1765faa01bd65ecd4243fa68",
    "transactionHash": "0x24c239e2d4884b01e3c90c971b6240b8beccca4dade214c0c03f06a99e06e96b",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 20416349,
        "transactionHash": "0x24c239e2d4884b01e3c90c971b6240b8beccca4dade214c0c03f06a99e06e96b",
        "address": "0x3549A6e441f1EC5740d8A5941e5Afe111a40238A",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a470111768d17c6fa6c935748348ff1974ca323d",
          "0x000000000000000000000000a470111768d17c6fa6c935748348ff1974ca323d"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xf9b63628b274d323c724a8c9553dea9aa425f84d1765faa01bd65ecd4243fa68"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 20416349,
        "transactionHash": "0x24c239e2d4884b01e3c90c971b6240b8beccca4dade214c0c03f06a99e06e96b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a470111768d17c6fa6c935748348ff1974ca323d",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000004566ae415d2000000000000000000000000000000000000000000000000000060ad1a004ca18000000000000000000000000000000000000000000000001a5ba56c68010c0be4800000000000000000000000000000000000000000000000005c56af1c36cf8000000000000000000000000000000000000000000000001a5ba9c2d2e521dde48",
        "logIndex": 3,
        "blockHash": "0xf9b63628b274d323c724a8c9553dea9aa425f84d1765faa01bd65ecd4243fa68"
      }
    ],
    "blockNumber": 20416349,
    "cumulativeGasUsed": "2510967",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7D8610E9567d2a6C9FBf66a5A13E9Ba8bb120d43",
    "0xb22033fF04AD01fbE8d78ef4622a20626834271B"
  ],
  "solcInputHash": "2a6486cc00c2b06fc474e1a60e31d25c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conditionalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"umaFinderAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resolutionTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalBond\",\"type\":\"uint256\"}],\"name\":\"QuestionInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"}],\"name\":\"QuestionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"emergencyReport\",\"type\":\"bool\"}],\"name\":\"QuestionResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"}],\"name\":\"QuestionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"}],\"name\":\"QuestionUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalBond\",\"type\":\"uint256\"}],\"name\":\"ResolutionDataRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conditionalTokenContract\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"payouts\",\"type\":\"uint256[]\"}],\"name\":\"emergencyReportPayouts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencySafetyPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"}],\"name\":\"getExpectedPayouts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"resolutionTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalBond\",\"type\":\"uint256\"}],\"name\":\"initializeQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"}],\"name\":\"isQuestionInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"}],\"name\":\"pauseQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"questions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"resolutionTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalBond\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"resolutionDataRequested\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"settled\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"}],\"name\":\"readyToRequestResolution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"}],\"name\":\"readyToSettle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"}],\"name\":\"reportPayouts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"}],\"name\":\"requestResolutionData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"umaFinder\",\"outputs\":[{\"internalType\":\"contract FinderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"}],\"name\":\"unPauseQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"emergencyReportPayouts(bytes32,uint256[])\":{\"params\":{\"questionID\":\"- The unique questionID of the question\"}},\"getExpectedPayouts(bytes32)\":{\"params\":{\"questionID\":\"- The unique questionID of the question\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initializeQuestion(bytes32,bytes,uint256,address,uint256,uint256)\":{\"params\":{\"ancillaryData\":\"- Holds data used to resolve a question\",\"proposalBond\":\"- Additional bond required to be posted by a price proposer and disputer\",\"questionID\":\"- The unique questionID of the question\",\"resolutionTime\":\"- Timestamp at which the Adapter can resolve a question\",\"reward\":\"- Reward offered to a successful proposer\",\"rewardToken\":\"- ERC20 token address used for payment of rewards and fees\"}},\"pauseQuestion(bytes32)\":{\"params\":{\"questionID\":\"- The unique questionID of the question\"}},\"readyToRequestResolution(bytes32)\":{\"params\":{\"questionID\":\"- The unique questionID of the question\"}},\"readyToSettle(bytes32)\":{\"params\":{\"questionID\":\"- The unique questionID of the question\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"reportPayouts(bytes32)\":{\"params\":{\"questionID\":\"- The unique questionID of the question\"}},\"requestResolutionData(bytes32)\":{\"params\":{\"questionID\":\"- The unique questionID of the question\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"settle(bytes32)\":{\"params\":{\"questionID\":\"- The unique questionID of the question\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unPauseQuestion(bytes32)\":{\"params\":{\"questionID\":\"- The unique questionID of the question\"}}},\"title\":\"UmaConditionalTokensBinaryAdapter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emergencyReportPayouts(bytes32,uint256[])\":{\"notice\":\"Allows an admin to report payouts in an emergency\"},\"getExpectedPayouts(bytes32)\":{\"notice\":\"Can be called by anyone to retrieve the expected payout of a settled question\"},\"initializeQuestion(bytes32,bytes,uint256,address,uint256,uint256)\":{\"notice\":\"Initializes a question on the Adapter to report on\"},\"pauseQuestion(bytes32)\":{\"notice\":\"Allows an admin to pause market resolution in an emergency\"},\"readyToRequestResolution(bytes32)\":{\"notice\":\"- Checks whether or not a question can start the resolution process\"},\"readyToSettle(bytes32)\":{\"notice\":\"Checks whether a questionID is ready to be settled\"},\"reportPayouts(bytes32)\":{\"notice\":\"Can be called by anyone to resolve a question\"},\"requestResolutionData(bytes32)\":{\"notice\":\"Called by anyone to request resolution data from the Optimistic Oracle\"},\"settle(bytes32)\":{\"notice\":\"Can be called by anyone to settle/finalize the price of a question\"},\"unPauseQuestion(bytes32)\":{\"notice\":\"Allows an admin to unpause market resolution in an emergency\"}},\"notice\":\"allows a condition to be resolved via UMA's Optimistic Oracle\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UmaConditionalTokensBinaryAdapter.sol\":\"UmaConditionalTokensBinaryAdapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/UmaConditionalTokensBinaryAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IConditionalTokens } from \\\"./interfaces/IConditionalTokens.sol\\\";\\nimport { FinderInterface } from \\\"./interfaces/FinderInterface.sol\\\";\\nimport { OptimisticOracleInterface } from \\\"./interfaces/OptimisticOracleInterface.sol\\\";\\n\\n/**\\n * @title UmaConditionalTokensBinaryAdapter\\n * @notice allows a condition to be resolved via UMA's Optimistic Oracle\\n */\\ncontract UmaConditionalTokensBinaryAdapter is AccessControl {\\n    // Conditional Tokens framework\\n    IConditionalTokens public immutable conditionalTokenContract;\\n\\n    // @notice Finder Interface for the Optimistic Oracle\\n    FinderInterface public umaFinder;\\n\\n    // @notice Unique query identifier for the Optimistic Oracle\\n    bytes32 public constant identifier = \\\"YES_OR_NO_QUERY\\\";\\n\\n    // @notice Time period after which an admin can emergency resolve a condition\\n    uint256 public constant emergencySafetyPeriod = 30 days;\\n\\n    struct QuestionData {\\n        // @notice Data used to resolve a condition\\n        bytes ancillaryData;\\n        // @notice Unix timestamp(in seconds) at which a market can be resolved\\n        uint256 resolutionTime;\\n        // @notice ERC20 token address used for payment of rewards and fees\\n        address rewardToken;\\n        // @notice Reward offered to a successful proposer\\n        uint256 reward;\\n        // @notice Additional bond required by Optimistic oracle proposers and disputers\\n        uint256 proposalBond;\\n        // @notice Flag marking whether resolution data has been requested from the Oracle\\n        bool resolutionDataRequested;\\n        // @notice Flag marking whether a question is resolved\\n        bool resolved;\\n        // @notice Flag marking whether a question is paused\\n        bool paused;\\n        // @notice Flag marking the block number when a question was settled\\n        uint256 settled;\\n    }\\n\\n    mapping(bytes32 => QuestionData) public questions;\\n\\n    // Events\\n    // @notice Emitted when a questionID is initialized\\n    event QuestionInitialized(\\n        bytes32 indexed questionID,\\n        bytes ancillaryData,\\n        uint256 resolutionTime,\\n        address rewardToken,\\n        uint256 reward,\\n        uint256 proposalBond\\n    );\\n\\n    // @notice Emitted when a question is paused by the Admin\\n    event QuestionPaused(bytes32 questionID);\\n\\n    // @notice Emitted when a question is unpaused by the Admin\\n    event QuestionUnpaused(bytes32 questionID);\\n\\n    // @notice Emitted when resolution data is requested from the Optimistic Oracle\\n    event ResolutionDataRequested(\\n        bytes32 indexed identifier,\\n        uint256 indexed timestamp,\\n        bytes32 indexed questionID,\\n        bytes ancillaryData,\\n        address rewardToken,\\n        uint256 reward,\\n        uint256 proposalBond\\n    );\\n\\n    // @notice Emitted when a question is settled\\n    event QuestionSettled(bytes32 indexed questionID);\\n\\n    // @notice Emitted when a question is resolved\\n    event QuestionResolved(bytes32 indexed questionID, bool indexed emergencyReport);\\n\\n    constructor(address conditionalTokenAddress, address umaFinderAddress) {\\n        conditionalTokenContract = IConditionalTokens(conditionalTokenAddress);\\n        umaFinder = FinderInterface(umaFinderAddress);\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Initializes a question on the Adapter to report on\\n     *\\n     * @param questionID     - The unique questionID of the question\\n     * @param ancillaryData  - Holds data used to resolve a question\\n     * @param resolutionTime - Timestamp at which the Adapter can resolve a question\\n     * @param rewardToken    - ERC20 token address used for payment of rewards and fees\\n     * @param reward         - Reward offered to a successful proposer\\n     * @param proposalBond   - Additional bond required to be posted by a price proposer and disputer\\n     */\\n    function initializeQuestion(\\n        bytes32 questionID,\\n        bytes memory ancillaryData,\\n        uint256 resolutionTime,\\n        address rewardToken,\\n        uint256 reward,\\n        uint256 proposalBond\\n    ) public {\\n        require(!isQuestionInitialized(questionID), \\\"Adapter::initializeQuestion: Question already initialized\\\");\\n        questions[questionID] = QuestionData({\\n            ancillaryData: ancillaryData,\\n            resolutionTime: resolutionTime,\\n            rewardToken: rewardToken,\\n            reward: reward,\\n            proposalBond: proposalBond,\\n            resolutionDataRequested: false,\\n            resolved: false,\\n            paused: false,\\n            settled: 0\\n        });\\n\\n        // Approve the OO to transfer the reward token\\n        address optimisticOracleAddress = getOptimisticOracleAddress();\\n        IERC20(rewardToken).approve(optimisticOracleAddress, reward);\\n        emit QuestionInitialized(questionID, ancillaryData, resolutionTime, rewardToken, reward, proposalBond);\\n    }\\n\\n    /**\\n     * @notice - Checks whether or not a question can start the resolution process\\n     * @param questionID - The unique questionID of the question\\n     */\\n    function readyToRequestResolution(bytes32 questionID) public view returns (bool) {\\n        if (!isQuestionInitialized(questionID)) {\\n            return false;\\n        }\\n        QuestionData storage questionData = questions[questionID];\\n        if (questionData.resolutionDataRequested == true) {\\n            return false;\\n        }\\n        if (questionData.resolved == true) {\\n            return false;\\n        }\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp > questionData.resolutionTime;\\n    }\\n\\n    /**\\n     * @notice Called by anyone to request resolution data from the Optimistic Oracle\\n     * @param questionID - The unique questionID of the question\\n     */\\n    function requestResolutionData(bytes32 questionID) public {\\n        require(\\n            readyToRequestResolution(questionID),\\n            \\\"Adapter::requestResolutionData: Question not ready to be resolved\\\"\\n        );\\n        QuestionData storage questionData = questions[questionID];\\n        require(!questionData.paused, \\\"Adapter::requestResolutionData: Question is paused\\\");\\n\\n        OptimisticOracleInterface optimisticOracle = getOptimisticOracle();\\n\\n        questionData.resolutionDataRequested = true;\\n\\n        emit ResolutionDataRequested(\\n            identifier,\\n            questionData.resolutionTime,\\n            questionID,\\n            questionData.ancillaryData,\\n            questionData.rewardToken,\\n            questionData.reward,\\n            questionData.proposalBond\\n        );\\n\\n        // Send a price request to the Optimistic oracle\\n        optimisticOracle.requestPrice(\\n            identifier,\\n            questionData.resolutionTime,\\n            questionData.ancillaryData,\\n            IERC20(questionData.rewardToken),\\n            questionData.reward\\n        );\\n\\n        // Update the proposal bond on the Optimistic oracle if necessary\\n        if (questionData.proposalBond > 0) {\\n            optimisticOracle.setBond(\\n                identifier,\\n                questionData.resolutionTime,\\n                questionData.ancillaryData,\\n                questionData.proposalBond\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks whether a questionID is ready to be settled\\n     * @param questionID - The unique questionID of the question\\n     */\\n    function readyToSettle(bytes32 questionID) public view returns (bool) {\\n        if (!isQuestionInitialized(questionID)) {\\n            return false;\\n        }\\n        QuestionData storage questionData = questions[questionID];\\n        // Ensure resolution data has been requested for question\\n        if (questionData.resolutionDataRequested == false) {\\n            return false;\\n        }\\n        // Ensure question hasn't been resolved\\n        if (questionData.resolved == true) {\\n            return false;\\n        }\\n        // Ensure question hasn't been settled\\n        if (questionData.settled != 0) {\\n            return false;\\n        }\\n        OptimisticOracleInterface optimisticOracle = getOptimisticOracle();\\n\\n        return\\n            optimisticOracle.hasPrice(\\n                address(this),\\n                identifier,\\n                questionData.resolutionTime,\\n                questionData.ancillaryData\\n            );\\n    }\\n\\n    /**\\n     * @notice Can be called by anyone to settle/finalize the price of a question\\n     * @param questionID - The unique questionID of the question\\n     */\\n    function settle(bytes32 questionID) public {\\n        require(readyToSettle(questionID), \\\"Adapter::settle: questionID is not ready to be settled\\\");\\n        QuestionData storage questionData = questions[questionID];\\n        require(!questionData.paused, \\\"Adapter::settle: Question is paused\\\");\\n\\n        OptimisticOracleInterface optimisticOracle = getOptimisticOracle();\\n        questionData.settled = block.number;\\n        optimisticOracle.settle(address(this), identifier, questionData.resolutionTime, questionData.ancillaryData);\\n        emit QuestionSettled(questionID);\\n    }\\n\\n    /**\\n     * @notice Can be called by anyone to retrieve the expected payout of a settled question\\n     * @param questionID - The unique questionID of the question\\n     */\\n    function getExpectedPayouts(bytes32 questionID) public view returns (uint256[] memory) {\\n        require(isQuestionInitialized(questionID), \\\"Adapter::getExpectedPayouts: questionID is not initialized\\\");\\n        QuestionData storage questionData = questions[questionID];\\n\\n        require(\\n            questionData.resolutionDataRequested,\\n            \\\"Adapter::getExpectedPayouts: resolutionData has not been requested\\\"\\n        );\\n        require(!questionData.resolved, \\\"Adapter::getExpectedPayouts: questionID is already resolved\\\");\\n        require(questionData.settled > 0, \\\"Adapter::getExpectedPayouts: questionID is not settled\\\");\\n        require(!questionData.paused, \\\"Adapter::getExpectedPayouts: Question is paused\\\");\\n\\n        OptimisticOracleInterface optimisticOracle = getOptimisticOracle();\\n\\n        // fetches resolution data from OO\\n        int256 resolutionData = optimisticOracle\\n            .getRequest(address(this), identifier, questionData.resolutionTime, questionData.ancillaryData)\\n            .resolvedPrice;\\n\\n        // Payouts: [YES, NO]\\n        uint256[] memory payouts = new uint256[](2);\\n\\n        // Valid prices are 0, 0.5 and 1\\n        require(\\n            resolutionData == 0 || resolutionData == 0.5 ether || resolutionData == 1 ether,\\n            \\\"Adapter::reportPayouts: Invalid resolution data\\\"\\n        );\\n\\n        if (resolutionData == 0) {\\n            //NO: Report [Yes, No] as [0, 1]\\n            payouts[0] = 0;\\n            payouts[1] = 1;\\n        } else if (resolutionData == 0.5 ether) {\\n            //UNKNOWN: Report [Yes, No] as [1, 1], 50/50\\n            payouts[0] = 1;\\n            payouts[1] = 1;\\n        } else {\\n            // YES: Report [Yes, No] as [1, 0]\\n            payouts[0] = 1;\\n            payouts[1] = 0;\\n        }\\n        return payouts;\\n    }\\n\\n    /**\\n     * @notice Can be called by anyone to resolve a question\\n     * @param questionID - The unique questionID of the question\\n     */\\n    function reportPayouts(bytes32 questionID) public {\\n        QuestionData storage questionData = questions[questionID];\\n\\n        // Payouts: [YES, NO]\\n        //getExpectedPayouts verifies that questionID is settled and can be resolved\\n        uint256[] memory payouts = getExpectedPayouts(questionID);\\n\\n        require(\\n            block.number > questionData.settled,\\n            \\\"Adapter::reportPayouts: Attempting to settle and reportPayouts in the same block\\\"\\n        );\\n\\n        questionData.resolved = true;\\n        conditionalTokenContract.reportPayouts(questionID, payouts);\\n        emit QuestionResolved(questionID, false);\\n    }\\n\\n    /**\\n     * @notice Allows an admin to report payouts in an emergency\\n     * @param questionID - The unique questionID of the question\\n     */\\n    function emergencyReportPayouts(bytes32 questionID, uint256[] calldata payouts) external {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"Adapter::emergencyReportPayouts: caller does not have admin role\\\"\\n        );\\n        require(isQuestionInitialized(questionID), \\\"Adapter::emergencyReportPayouts: questionID is not initialized\\\");\\n\\n        require(\\n            // solhint-disable-next-line not-rely-on-time\\n            block.timestamp > questions[questionID].resolutionTime + emergencySafetyPeriod,\\n            \\\"Adapter::emergencyReportPayouts: safety period has not passed\\\"\\n        );\\n\\n        require((payouts[0] + payouts[1]) == 1, \\\"Adapter::emergencyReportPayouts: payouts must be binary\\\");\\n        require(payouts.length == 2, \\\"Adapter::emergencyReportPayouts: payouts must be binary\\\");\\n\\n        QuestionData storage questionData = questions[questionID];\\n\\n        questionData.resolved = true;\\n        conditionalTokenContract.reportPayouts(questionID, payouts);\\n        emit QuestionResolved(questionID, true);\\n    }\\n\\n    /**\\n     * @notice Allows an admin to pause market resolution in an emergency\\n     * @param questionID - The unique questionID of the question\\n     */\\n    function pauseQuestion(bytes32 questionID) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Adapter::pauseQuestion: caller does not have admin role\\\");\\n        require(isQuestionInitialized(questionID), \\\"Adapter::pauseQuestion: questionID is not initialized\\\");\\n        QuestionData storage questionData = questions[questionID];\\n\\n        questionData.paused = true;\\n        emit QuestionPaused(questionID);\\n    }\\n\\n    /**\\n     * @notice Allows an admin to unpause market resolution in an emergency\\n     * @param questionID - The unique questionID of the question\\n     */\\n    function unPauseQuestion(bytes32 questionID) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Adapter::unPauseQuestion: caller does not have admin role\\\");\\n        require(isQuestionInitialized(questionID), \\\"Adapter::unPauseQuestion: questionID is not initialized\\\");\\n        QuestionData storage questionData = questions[questionID];\\n\\n        questionData.paused = false;\\n        emit QuestionUnpaused(questionID);\\n    }\\n\\n    function isQuestionInitialized(bytes32 questionID) public view returns (bool) {\\n        return questions[questionID].resolutionTime != 0;\\n    }\\n\\n    function getOptimisticOracleAddress() internal view returns (address) {\\n        return umaFinder.getImplementationAddress(\\\"OptimisticOracle\\\");\\n    }\\n\\n    function getOptimisticOracle() internal view returns (OptimisticOracleInterface) {\\n        return OptimisticOracleInterface(getOptimisticOracleAddress());\\n    }\\n}\\n\",\"keccak256\":\"0xd6cc9b1a21d60d173af765af20a36870ac809c43c32214d8344de3813c3f1d51\",\"license\":\"MIT\"},\"contracts/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.0;\\n\\n/**\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\n * @dev Examples are the Oracle or Store interfaces.\\n */\\ninterface FinderInterface {\\n    /**\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\n\\n    /**\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\n     * @param interfaceName queried interface.\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\n}\\n\",\"keccak256\":\"0xa03675cac74cc6e5cda8fe93e8c57db8f7d11cee6b27c81e733f4372114e591c\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IConditionalTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IConditionalTokens {\\n    /// @dev Emitted upon the successful preparation of a condition.\\n    /// @param conditionId The condition's ID. This ID may be derived from the other three parameters via ``keccak256(abi.encodePacked(oracle, questionId, outcomeSlotCount))``.\\n    /// @param oracle The account assigned to report the result for the prepared condition.\\n    /// @param questionId An identifier for the question to be answered by the oracle.\\n    /// @param outcomeSlotCount The number of outcome slots which should be used for this condition. Must not exceed 256.\\n    event ConditionPreparation(\\n        bytes32 indexed conditionId,\\n        address indexed oracle,\\n        bytes32 indexed questionId,\\n        uint256 outcomeSlotCount\\n    );\\n\\n    event ConditionResolution(\\n        bytes32 indexed conditionId,\\n        address indexed oracle,\\n        bytes32 indexed questionId,\\n        uint256 outcomeSlotCount,\\n        uint256[] payoutNumerators\\n    );\\n\\n    /// @dev Emitted when a position is successfully split.\\n    event PositionSplit(\\n        address indexed stakeholder,\\n        IERC20 collateralToken,\\n        bytes32 indexed parentCollectionId,\\n        bytes32 indexed conditionId,\\n        uint256[] partition,\\n        uint256 amount\\n    );\\n    /// @dev Emitted when positions are successfully merged.\\n    event PositionsMerge(\\n        address indexed stakeholder,\\n        IERC20 collateralToken,\\n        bytes32 indexed parentCollectionId,\\n        bytes32 indexed conditionId,\\n        uint256[] partition,\\n        uint256 amount\\n    );\\n    event PayoutRedemption(\\n        address indexed redeemer,\\n        IERC20 indexed collateralToken,\\n        bytes32 indexed parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] indexSets,\\n        uint256 payout\\n    );\\n\\n    /// Mapping key is an condition ID. Value represents numerators of the payout vector associated with the condition. This array is initialized with a length equal to the outcome slot count. E.g. Condition with 3 outcomes [A, B, C] and two of those correct [0.5, 0.5, 0]. In Ethereum there are no decimal values, so here, 0.5 is represented by fractions like 1/2 == 0.5. That's why we need numerator and denominator values. Payout numerators are also used as a check of initialization. If the numerators array is empty (has length zero), the condition was not created/prepared. See getOutcomeSlotCount.\\n    function payoutNumerators(bytes32) external returns (uint256[] memory);\\n\\n    /// Denominator is also used for checking if the condition has been resolved. If the denominator is non-zero, then the condition has been resolved.\\n    function payoutDenominator(bytes32) external returns (uint256);\\n\\n    /// @dev This function prepares a condition by initializing a payout vector associated with the condition.\\n    /// @param oracle The account assigned to report the result for the prepared condition.\\n    /// @param questionId An identifier for the question to be answered by the oracle.\\n    /// @param outcomeSlotCount The number of outcome slots which should be used for this condition. Must not exceed 256.\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint256 outcomeSlotCount\\n    ) external;\\n\\n    /// @dev Called by the oracle for reporting results of conditions. Will set the payout vector for the condition with the ID ``keccak256(abi.encodePacked(oracle, questionId, outcomeSlotCount))``, where oracle is the message sender, questionId is one of the parameters of this function, and outcomeSlotCount is the length of the payouts parameter, which contains the payoutNumerators for each outcome slot of the condition.\\n    /// @param questionId The question ID the oracle is answering for\\n    /// @param payouts The oracle's answer\\n    function reportPayouts(bytes32 questionId, uint256[] calldata payouts) external;\\n\\n    /// @dev This function splits a position. If splitting from the collateral, this contract will attempt to transfer `amount` collateral from the message sender to itself. Otherwise, this contract will burn `amount` stake held by the message sender in the position being split worth of EIP 1155 tokens. Regardless, if successful, `amount` stake will be minted in the split target positions. If any of the transfers, mints, or burns fail, the transaction will revert. The transaction will also revert if the given partition is trivial, invalid, or refers to more slots than the condition is prepared with.\\n    /// @param collateralToken The address of the positions' backing collateral token.\\n    /// @param parentCollectionId The ID of the outcome collections common to the position being split and the split target positions. May be null, in which only the collateral is shared.\\n    /// @param conditionId The ID of the condition to split on.\\n    /// @param partition An array of disjoint index sets representing a nontrivial partition of the outcome slots of the given condition. E.g. A|B and C but not A|B and B|C (is not disjoint). Each element's a number which, together with the condition, represents the outcome collection. E.g. 0b110 is A|B, 0b010 is B, etc.\\n    /// @param amount The amount of collateral or stake to split.\\n    function splitPosition(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata partition,\\n        uint256 amount\\n    ) external;\\n\\n    function mergePositions(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata partition,\\n        uint256 amount\\n    ) external;\\n\\n    function redeemPositions(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata indexSets\\n    ) external;\\n\\n    /// @dev Gets the outcome slot count of a condition.\\n    /// @param conditionId ID of the condition.\\n    /// @return Number of outcome slots associated with a condition, or zero if condition has not been prepared yet.\\n    function getOutcomeSlotCount(bytes32 conditionId) external view returns (uint256);\\n\\n    /// @dev Constructs a condition ID from an oracle, a question ID, and the outcome slot count for the question.\\n    /// @param oracle The account assigned to report the result for the prepared condition.\\n    /// @param questionId An identifier for the question to be answered by the oracle.\\n    /// @param outcomeSlotCount The number of outcome slots which should be used for this condition. Must not exceed 256.\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint256 outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    /// @dev Constructs an outcome collection ID from a parent collection and an outcome collection.\\n    /// @param parentCollectionId Collection ID of the parent outcome collection, or bytes32(0) if there's no parent.\\n    /// @param conditionId Condition ID of the outcome collection to combine with the parent outcome collection.\\n    /// @param indexSet Index set of the outcome collection to combine with the parent outcome collection.\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256 indexSet\\n    ) external view returns (bytes32);\\n\\n    /// @dev Constructs a position ID from a collateral token and an outcome collection. These IDs are used as the ERC-1155 ID for this contract.\\n    /// @param collateralToken Collateral token which backs the position.\\n    /// @param collectionId ID of the outcome collection associated with this position.\\n    function getPositionId(IERC20 collateralToken, bytes32 collectionId) external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0x7bd245c937fd0aa20aa2b0fc79182d6cca75f0ec462915e0f19f9fc8c068b1e4\",\"license\":\"MIT\"},\"contracts/interfaces/OptimisticOracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface OptimisticOracleInterface {\\n    // Struct representing a price request.\\n    struct Request {\\n        address proposer; // Address of the proposer.\\n        address disputer; // Address of the disputer.\\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\\n        bool settled; // True if the request is settled.\\n        bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\\n        int256 proposedPrice; // Price that the proposer submitted.\\n        int256 resolvedPrice; // Price resolved once the request is settled.\\n        uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\n        uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\n        uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\n        uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\n        uint256 customLiveness; // Custom liveness value set by the requester.\\n    }\\n\\n    /**\\n     * @notice Requests a new price.\\n     * @param identifier price identifier being requested.\\n     * @param timestamp timestamp of the price being requested.\\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n     *               which could make sense if the contract requests and proposes the value in the same call or\\n     *               provides its own reward system.\\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\\n     * This can be changed with a subsequent call to setBond().\\n     */\\n    function requestPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        IERC20 currency,\\n        uint256 reward\\n    ) external returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Set the proposal bond associated with a price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param bond custom bond amount to set.\\n     * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\\n     * changed again with a subsequent call to setBond().\\n     */\\n    function setBond(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 bond\\n    ) external returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Gets the current data structure containing all information about a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the Request data structure.\\n     */\\n    function getRequest(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external view returns (Request memory);\\n\\n    /**\\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\n     * the returned bonds as well as additional rewards.\\n     */\\n    function settle(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external returns (uint256 payout);\\n\\n    /**\\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\\n     * hasn't been settled.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return resolved price.\\n     */\\n    function settleAndGetPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external returns (int256);\\n\\n    /**\\n     * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return true if price has resolved or settled, false otherwise.\\n     */\\n    function hasPrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x56ee0a969fb28f4b5e0182912302d0cba0301bad0e35c5bb1f16c8ff65132bd6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002c2438038062002c2483398101604081905262000034916200015a565b606082901b6001600160601b031916608052600180546001600160a01b0319166001600160a01b0383161790556200006e60003362000076565b505062000191565b62000082828262000086565b5050565b62000092828262000110565b62000082576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620000cc62000139565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b3390565b80516001600160a01b03811681146200015557600080fd5b919050565b600080604083850312156200016d578182fd5b62000178836200013d565b915062000188602084016200013d565b90509250929050565b60805160601c612a66620001be600039600081816104cb01528181610b480152610ffb0152612a666000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c806386ec6288116100e3578063a39cc2991161008c578063cf7655e511610066578063cf7655e51461032b578063d547741f1461033e578063e8143999146103515761018d565b8063a39cc299146102fd578063be70547314610310578063c66d4c6c146103235761018d565b806395addb90116100bd57806395addb90146102ba578063987757dd146102e2578063a217fddf146102f55761018d565b806386ec62881461028c5780638b5dc5041461029f57806391d14854146102a75761018d565b80632f2ff15d116101455780633cc792651161011f5780633cc792651461025c57806370b9e9041461026f5780637998a1c4146102845761018d565b80632f2ff15d1461021657806334e5e28e1461022957806336568abe146102495761018d565b8063248a9ca311610176578063248a9ca3146101ce5780632654320c146101ee578063275180c0146102015761018d565b806301ffc9a714610192578063092149ed146101bb575b600080fd5b6101a56101a0366004611b98565b610364565b6040516101b29190611e9c565b60405180910390f35b6101a56101c9366004611a15565b6103c2565b6101e16101dc366004611a15565b6103d9565b6040516101b29190611ea7565b6101a56101fc366004611a15565b6103ee565b61021461020f366004611a15565b61045d565b005b610214610224366004611a2d565b610566565b61023c610237366004611a15565b61058f565b6040516101b29190611e89565b610214610257366004611a2d565b610892565b61021461026a366004611a15565b6108d8565b610277610b46565b6040516101b29190612068565b6101e1610b6a565b61021461029a366004611a15565b610b80565b610277610c2a565b6101a56102b5366004611a2d565b610c39565b6102cd6102c8366004611a15565b610c62565b6040516101b299989796959493929190611fcf565b6102146102f0366004611a15565b610d48565b6101e1610e9c565b61021461030b366004611a5c565b610ea1565b61021461031e366004611a15565b61109a565b6101e1611133565b610214610339366004611ad5565b61113a565b61021461034c366004611a2d565b61136c565b6101a561035f366004611a15565b61138b565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806103ba57506103ba826114c1565b90505b919050565b600090815260026020526040902060010154151590565b60009081526020819052604090206001015490565b60006103f9826103c2565b610405575060006103bd565b6000828152600260205260409020600581015460ff1615156001141561042f5760009150506103bd565b600581015460ff610100909104161515600114156104515760009150506103bd565b60010154421192915050565b6000818152600260205260408120906104758361058f565b9050816006015443116104a35760405162461bcd60e51b815260040161049a906126ac565b60405180910390fd5b60058201805461ff001916610100179055604051633124a62b60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c49298ac906105029086908590600401611f0a565b600060405180830381600087803b15801561051c57600080fd5b505af1158015610530573d6000803e3d6000fd5b5050604051600092508591507f5c3937ed929cd157b73b417381d743daf6e1ef65999e3ccb5dd64bc3247e28d6908390a3505050565b61056f826103d9565b6105808161057b61150b565b61150f565b61058a8383611573565b505050565b606061059a826103c2565b6105b65760405162461bcd60e51b815260040161049a90612595565b6000828152600260205260409020600581015460ff166105e85760405162461bcd60e51b815260040161049a90612121565b6005810154610100900460ff16156106125760405162461bcd60e51b815260040161049a9061278d565b60008160060154116106365760405162461bcd60e51b815260040161049a906123c4565b600581015462010000900460ff16156106615760405162461bcd60e51b815260040161049a90612287565b600061066b6115f8565b60018301546040517fa9904f9b0000000000000000000000000000000000000000000000000000000081529192506000916001600160a01b0384169163a9904f9b916106d29130916e5945535f4f525f4e4f5f515545525960881b91908990600401611e38565b6101806040518083038186803b1580156106eb57600080fd5b505afa1580156106ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107239190611bd8565b60c0015160408051600280825260608201835292935060009290916020830190803683370190505090508115806107615750816706f05b59d3b20000145b80610773575081670de0b6b3a7640000145b61078f5760405162461bcd60e51b815260040161049a906121a4565b816107f7576000816000815181106107b757634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506001816001815181106107e657634e487b7160e01b600052603260045260246000fd5b602002602001018181525050610889565b816706f05b59d3b20000141561082a576001816000815181106107b757634e487b7160e01b600052603260045260246000fd5b60018160008151811061084d57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505060008160018151811061087c57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b95945050505050565b61089a61150b565b6001600160a01b0316816001600160a01b0316146108ca5760405162461bcd60e51b815260040161049a906128a4565b6108d48282611607565b5050565b6108e1816103ee565b6108fd5760405162461bcd60e51b815260040161049a906122e4565b6000818152600260205260409020600581015462010000900460ff16156109365760405162461bcd60e51b815260040161049a90612847565b60006109406115f8565b60058301805460ff1916600190811790915583015460028401546003850154600486015460405194955087946e5945535f4f525f4e4f5f515545525960881b937f505a8922cc269f3f7ae38e83d512e88b4cd544595179cc34c099e373d2674f59936109b9938a936001600160a01b0390931692612030565b60405180910390a46001820154600283015460038401546040517f11df92f10000000000000000000000000000000000000000000000000000000081526001600160a01b03808616946311df92f194610a2f946e5945535f4f525f4e4f5f515545525960881b9492938a93921691600401611f23565b602060405180830381600087803b158015610a4957600080fd5b505af1158015610a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a819190611c98565b5060048201541561058a5760018201546004808401546040517fad5a755a0000000000000000000000000000000000000000000000000000000081526001600160a01b0385169363ad5a755a93610aee936e5945535f4f525f4e4f5f515545525960881b93899201611f5f565b602060405180830381600087803b158015610b0857600080fd5b505af1158015610b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b409190611c98565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6e5945535f4f525f4e4f5f515545525960881b81565b610b8b600033610c39565b610ba75760405162461bcd60e51b815260040161049a9061208f565b610bb0816103c2565b610bcc5760405162461bcd60e51b815260040161049a9061222a565b6000818152600260205260409081902060058101805462ff000019166201000017905590517f6ded7250a9d5f79aef5add44600fc20a74a0af6f4730baa4fc4ab87bf484b81290610c1e908490611ea7565b60405180910390a15050565b6001546001600160a01b031681565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600260205260009081526040902080548190610c7d906129b1565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca9906129b1565b8015610cf65780601f10610ccb57610100808354040283529160200191610cf6565b820191906000526020600020905b815481529060010190602001808311610cd957829003601f168201915b50505060018401546002850154600386015460048701546005880154600690980154969793966001600160a01b0390931695509093509160ff8082169261010083048216926201000090049091169089565b610d518161138b565b610d6d5760405162461bcd60e51b815260040161049a9061264f565b6000818152600260205260409020600581015462010000900460ff1615610da65760405162461bcd60e51b815260040161049a906124db565b6000610db06115f8565b43600684015560018301546040517f5e9a79a90000000000000000000000000000000000000000000000000000000081529192506001600160a01b03831691635e9a79a991610e199130916e5945535f4f525f4e4f5f515545525960881b918890600401611e38565b602060405180830381600087803b158015610e3357600080fd5b505af1158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6b9190611c98565b5060405183907fd7e618e02913af732e9bbb7bad555e64867cf63058545af824177bede035337b90600090a2505050565b600081565b610eac600033610c39565b610ec85760405162461bcd60e51b815260040161049a9061272f565b610ed1836103c2565b610eed5760405162461bcd60e51b815260040161049a9061247e565b600083815260026020526040902060010154610f0d9062278d0090612937565b4211610f2b5760405162461bcd60e51b815260040161049a906125f2565b81816001818110610f4c57634e487b7160e01b600052603260045260246000fd5b9050602002013582826000818110610f7457634e487b7160e01b600052603260045260246000fd5b90506020020135610f859190612937565b600114610fa45760405162461bcd60e51b815260040161049a90612538565b60028114610fc45760405162461bcd60e51b815260040161049a90612538565b6000838152600260205260409081902060058101805461ff0019166101001790559051633124a62b60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c49298ac9061103490879087908790600401611eb0565b600060405180830381600087803b15801561104e57600080fd5b505af1158015611062573d6000803e3d6000fd5b5050604051600192508691507f5c3937ed929cd157b73b417381d743daf6e1ef65999e3ccb5dd64bc3247e28d690600090a350505050565b6110a5600033610c39565b6110c15760405162461bcd60e51b815260040161049a90612367565b6110ca816103c2565b6110e65760405162461bcd60e51b815260040161049a90612421565b6000818152600260205260409081902060058101805462ff00001916905590517f92d28918c5574e7fc0f4f948c39502682c81cfb4089b07b83f95b3264e5e5e0690610c1e908490611ea7565b62278d0081565b611143866103c2565b156111605760405162461bcd60e51b815260040161049a906127ea565b604080516101208101825286815260208082018790526001600160a01b038616828401526060820185905260808201849052600060a0830181905260c0830181905260e083018190526101008301819052898152600282529290922081518051929391926111d19284920190611920565b506020820151600182015560408201516002820180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909216919091179055606082015160038201556080820151600482015560a082015160058201805460c085015160e086015160ff199092169315159390931761ff00191661010093151584021762ff00001916620100009115159190910217905590910151600690910155600061128661168a565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081529091506001600160a01b0385169063095ea7b3906112d09084908790600401611e70565b602060405180830381600087803b1580156112ea57600080fd5b505af11580156112fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132291906119fb565b50867f5a6801fc8f8820ceb071609ea09438cbab61e56085a50d9a1e672d81aec0adda878787878760405161135b959493929190611f8f565b60405180910390a250505050505050565b611375826103d9565b6113818161057b61150b565b61058a8383611607565b6000611396826103c2565b6113a2575060006103bd565b6000828152600260205260409020600581015460ff166113c65760009150506103bd565b600581015460ff610100909104161515600114156113e85760009150506103bd565b6006810154156113fc5760009150506103bd565b60006114066115f8565b60018301546040517fbc58ccaa0000000000000000000000000000000000000000000000000000000081529192506001600160a01b0383169163bc58ccaa916114699130916e5945535f4f525f4e4f5f515545525960881b918890600401611e38565b60206040518083038186803b15801561148157600080fd5b505afa158015611495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b991906119fb565b949350505050565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b3390565b6115198282610c39565b6108d457611531816001600160a01b03166014611722565b61153c836020611722565b60405160200161154d929190611db7565b60408051601f198184030181529082905262461bcd60e51b825261049a9160040161207c565b61157d8282610c39565b6108d4576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556115b461150b565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061160261168a565b905090565b6116118282610c39565b156108d4576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916905561164661150b565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6001546040517faafd5e400000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063aafd5e40906116d290600401612201565b60206040518083038186803b1580156116ea57600080fd5b505afa1580156116fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160291906119df565b6060600061173183600261294f565b61173c906002612937565b67ffffffffffffffff81111561176257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561178c576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106117d157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061182a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061184e84600261294f565b611859906001612937565b90505b60018111156118fa577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106118a857634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106118cc57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936118f38161299a565b905061185c565b5083156119195760405162461bcd60e51b815260040161049a906120ec565b9392505050565b82805461192c906129b1565b90600052602060002090601f01602090048101928261194e5760008555611994565b82601f1061196757805160ff1916838001178555611994565b82800160010185558215611994579182015b82811115611994578251825591602001919060010190611979565b506119a09291506119a4565b5090565b5b808211156119a057600081556001016119a5565b80356103bd81612a18565b80516103bd81612a18565b805180151581146103bd57600080fd5b6000602082840312156119f0578081fd5b815161191981612a18565b600060208284031215611a0c578081fd5b611919826119cf565b600060208284031215611a26578081fd5b5035919050565b60008060408385031215611a3f578081fd5b823591506020830135611a5181612a18565b809150509250929050565b600080600060408486031215611a70578081fd5b83359250602084013567ffffffffffffffff80821115611a8e578283fd5b818601915086601f830112611aa1578283fd5b813581811115611aaf578384fd5b8760208083028501011115611ac2578384fd5b6020830194508093505050509250925092565b60008060008060008060c08789031215611aed578182fd5b8635955060208088013567ffffffffffffffff80821115611b0c578485fd5b818a0191508a601f830112611b1f578485fd5b813581811115611b3157611b31612a02565b611b43601f8201601f19168501612901565b91508082528b84828501011115611b58578586fd5b8084840185840137810190920184905250945060408701359350611b7e606088016119b9565b92506080870135915060a087013590509295509295509295565b600060208284031215611ba9578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611919578182fd5b6000610180808385031215611beb578182fd5b611bf481612901565b9050611bff836119c4565b8152611c0d602084016119c4565b6020820152611c1e604084016119c4565b6040820152611c2f606084016119cf565b6060820152611c40608084016119cf565b608082015260a0838101519082015260c0808401519082015260e08084015190820152610100808401519082015261012080840151908201526101408084015190820152610160928301519281019290925250919050565b600060208284031215611ca9578081fd5b5051919050565b6000815180845260208085019450808401835b83811015611cdf57815187529582019590820190600101611cc3565b509495945050505050565b60008151808452611d0281602086016020860161296e565b601f01601f19169290920160200192915050565b805460009060028104600180831680611d3057607f831692505b6020808410821415611d5057634e487b7160e01b86526022600452602486fd5b611d5a8489611ea7565b828015611d6e5760018114611d7f57611daa565b60ff19871682528282019750611daa565b611d888961292b565b60005b87811015611da457815484820152908601908401611d8b565b83019850505b5050505050505092915050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351611def81601785016020880161296e565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611e2c81602884016020880161296e565b01602801949350505050565b60006001600160a01b038616825284602083015283604083015260806060830152611e666080830184611d16565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b6000602082526119196020830184611cb0565b901515815260200190565b90815260200190565b6000848252604060208301528260408301527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115611eee578081fd5b6020830280856060850137919091016060019081529392505050565b6000838252604060208301526114b96040830184611cb0565b600086825285602083015260a06040830152611f4260a0830186611d16565b6001600160a01b0394909416606083015250608001529392505050565b600085825284602083015260806040830152611f7e6080830185611d16565b905082606083015295945050505050565b600060a08252611fa260a0830188611cea565b90508560208301526001600160a01b03851660408301528360608301528260808301529695505050505050565b6000610120808352611fe38184018d611cea565b602084019b909b5250506001600160a01b039790971660408801526060870195909552608086019390935290151560a0850152151560c0840152151560e083015261010090910152919050565b6000608082526120436080830187611d16565b6001600160a01b03959095166020830152506040810192909252606090910152919050565b6001600160a01b0391909116815260200190565b6000602082526119196020830184611cea565b60208082526037908201527f416461707465723a3a70617573655175657374696f6e3a2063616c6c6572206460408201527f6f6573206e6f7420686176652061646d696e20726f6c65000000000000000000606082015260800190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b60208082526042908201527f416461707465723a3a67657445787065637465645061796f7574733a2072657360408201527f6f6c7574696f6e4461746120686173206e6f74206265656e207265717565737460608201527f6564000000000000000000000000000000000000000000000000000000000000608082015260a00190565b6020808252602f908201527f416461707465723a3a7265706f72745061796f7574733a20496e76616c69642060408201527f7265736f6c7574696f6e20646174610000000000000000000000000000000000606082015260800190565b7f4f7074696d69737469634f7261636c6500000000000000000000000000000000815260200190565b60208082526035908201527f416461707465723a3a70617573655175657374696f6e3a207175657374696f6e60408201527f4944206973206e6f7420696e697469616c697a65640000000000000000000000606082015260800190565b6020808252602f908201527f416461707465723a3a67657445787065637465645061796f7574733a2051756560408201527f7374696f6e206973207061757365640000000000000000000000000000000000606082015260800190565b60208082526041908201527f416461707465723a3a726571756573745265736f6c7574696f6e446174613a2060408201527f5175657374696f6e206e6f7420726561647920746f206265207265736f6c766560608201527f6400000000000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526039908201527f416461707465723a3a756e50617573655175657374696f6e3a2063616c6c657260408201527f20646f6573206e6f7420686176652061646d696e20726f6c6500000000000000606082015260800190565b60208082526036908201527f416461707465723a3a67657445787065637465645061796f7574733a2071756560408201527f7374696f6e4944206973206e6f7420736574746c656400000000000000000000606082015260800190565b60208082526037908201527f416461707465723a3a756e50617573655175657374696f6e3a2071756573746960408201527f6f6e4944206973206e6f7420696e697469616c697a6564000000000000000000606082015260800190565b6020808252603e908201527f416461707465723a3a656d657267656e63795265706f72745061796f7574733a60408201527f207175657374696f6e4944206973206e6f7420696e697469616c697a65640000606082015260800190565b60208082526023908201527f416461707465723a3a736574746c653a205175657374696f6e2069732070617560408201527f7365640000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526037908201527f416461707465723a3a656d657267656e63795265706f72745061796f7574733a60408201527f207061796f757473206d7573742062652062696e617279000000000000000000606082015260800190565b6020808252603a908201527f416461707465723a3a67657445787065637465645061796f7574733a2071756560408201527f7374696f6e4944206973206e6f7420696e697469616c697a6564000000000000606082015260800190565b6020808252603d908201527f416461707465723a3a656d657267656e63795265706f72745061796f7574733a60408201527f2073616665747920706572696f6420686173206e6f7420706173736564000000606082015260800190565b60208082526036908201527f416461707465723a3a736574746c653a207175657374696f6e4944206973206e60408201527f6f7420726561647920746f20626520736574746c656400000000000000000000606082015260800190565b60208082526050908201527f416461707465723a3a7265706f72745061796f7574733a20417474656d70746960408201527f6e6720746f20736574746c6520616e64207265706f72745061796f757473206960608201527f6e207468652073616d6520626c6f636b00000000000000000000000000000000608082015260a00190565b602080825260409082018190527f416461707465723a3a656d657267656e63795265706f72745061796f7574733a908201527f2063616c6c657220646f6573206e6f7420686176652061646d696e20726f6c65606082015260800190565b6020808252603b908201527f416461707465723a3a67657445787065637465645061796f7574733a2071756560408201527f7374696f6e494420697320616c7265616479207265736f6c7665640000000000606082015260800190565b60208082526039908201527f416461707465723a3a696e697469616c697a655175657374696f6e3a2051756560408201527f7374696f6e20616c726561647920696e697469616c697a656400000000000000606082015260800190565b60208082526032908201527f416461707465723a3a726571756573745265736f6c7574696f6e446174613a2060408201527f5175657374696f6e206973207061757365640000000000000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b60405181810167ffffffffffffffff8111828210171561292357612923612a02565b604052919050565b60009081526020902090565b6000821982111561294a5761294a6129ec565b500190565b6000816000190483118215151615612969576129696129ec565b500290565b60005b83811015612989578181015183820152602001612971565b83811115610b405750506000910152565b6000816129a9576129a96129ec565b506000190190565b6002810460018216806129c557607f821691505b602082108114156129e657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612a2d57600080fd5b5056fea264697066735822122015d9619730bfd251a934996aa418bd58595284b4643153b49e26f0976aed0fbd64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018d5760003560e01c806386ec6288116100e3578063a39cc2991161008c578063cf7655e511610066578063cf7655e51461032b578063d547741f1461033e578063e8143999146103515761018d565b8063a39cc299146102fd578063be70547314610310578063c66d4c6c146103235761018d565b806395addb90116100bd57806395addb90146102ba578063987757dd146102e2578063a217fddf146102f55761018d565b806386ec62881461028c5780638b5dc5041461029f57806391d14854146102a75761018d565b80632f2ff15d116101455780633cc792651161011f5780633cc792651461025c57806370b9e9041461026f5780637998a1c4146102845761018d565b80632f2ff15d1461021657806334e5e28e1461022957806336568abe146102495761018d565b8063248a9ca311610176578063248a9ca3146101ce5780632654320c146101ee578063275180c0146102015761018d565b806301ffc9a714610192578063092149ed146101bb575b600080fd5b6101a56101a0366004611b98565b610364565b6040516101b29190611e9c565b60405180910390f35b6101a56101c9366004611a15565b6103c2565b6101e16101dc366004611a15565b6103d9565b6040516101b29190611ea7565b6101a56101fc366004611a15565b6103ee565b61021461020f366004611a15565b61045d565b005b610214610224366004611a2d565b610566565b61023c610237366004611a15565b61058f565b6040516101b29190611e89565b610214610257366004611a2d565b610892565b61021461026a366004611a15565b6108d8565b610277610b46565b6040516101b29190612068565b6101e1610b6a565b61021461029a366004611a15565b610b80565b610277610c2a565b6101a56102b5366004611a2d565b610c39565b6102cd6102c8366004611a15565b610c62565b6040516101b299989796959493929190611fcf565b6102146102f0366004611a15565b610d48565b6101e1610e9c565b61021461030b366004611a5c565b610ea1565b61021461031e366004611a15565b61109a565b6101e1611133565b610214610339366004611ad5565b61113a565b61021461034c366004611a2d565b61136c565b6101a561035f366004611a15565b61138b565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806103ba57506103ba826114c1565b90505b919050565b600090815260026020526040902060010154151590565b60009081526020819052604090206001015490565b60006103f9826103c2565b610405575060006103bd565b6000828152600260205260409020600581015460ff1615156001141561042f5760009150506103bd565b600581015460ff610100909104161515600114156104515760009150506103bd565b60010154421192915050565b6000818152600260205260408120906104758361058f565b9050816006015443116104a35760405162461bcd60e51b815260040161049a906126ac565b60405180910390fd5b60058201805461ff001916610100179055604051633124a62b60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c49298ac906105029086908590600401611f0a565b600060405180830381600087803b15801561051c57600080fd5b505af1158015610530573d6000803e3d6000fd5b5050604051600092508591507f5c3937ed929cd157b73b417381d743daf6e1ef65999e3ccb5dd64bc3247e28d6908390a3505050565b61056f826103d9565b6105808161057b61150b565b61150f565b61058a8383611573565b505050565b606061059a826103c2565b6105b65760405162461bcd60e51b815260040161049a90612595565b6000828152600260205260409020600581015460ff166105e85760405162461bcd60e51b815260040161049a90612121565b6005810154610100900460ff16156106125760405162461bcd60e51b815260040161049a9061278d565b60008160060154116106365760405162461bcd60e51b815260040161049a906123c4565b600581015462010000900460ff16156106615760405162461bcd60e51b815260040161049a90612287565b600061066b6115f8565b60018301546040517fa9904f9b0000000000000000000000000000000000000000000000000000000081529192506000916001600160a01b0384169163a9904f9b916106d29130916e5945535f4f525f4e4f5f515545525960881b91908990600401611e38565b6101806040518083038186803b1580156106eb57600080fd5b505afa1580156106ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107239190611bd8565b60c0015160408051600280825260608201835292935060009290916020830190803683370190505090508115806107615750816706f05b59d3b20000145b80610773575081670de0b6b3a7640000145b61078f5760405162461bcd60e51b815260040161049a906121a4565b816107f7576000816000815181106107b757634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506001816001815181106107e657634e487b7160e01b600052603260045260246000fd5b602002602001018181525050610889565b816706f05b59d3b20000141561082a576001816000815181106107b757634e487b7160e01b600052603260045260246000fd5b60018160008151811061084d57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505060008160018151811061087c57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b95945050505050565b61089a61150b565b6001600160a01b0316816001600160a01b0316146108ca5760405162461bcd60e51b815260040161049a906128a4565b6108d48282611607565b5050565b6108e1816103ee565b6108fd5760405162461bcd60e51b815260040161049a906122e4565b6000818152600260205260409020600581015462010000900460ff16156109365760405162461bcd60e51b815260040161049a90612847565b60006109406115f8565b60058301805460ff1916600190811790915583015460028401546003850154600486015460405194955087946e5945535f4f525f4e4f5f515545525960881b937f505a8922cc269f3f7ae38e83d512e88b4cd544595179cc34c099e373d2674f59936109b9938a936001600160a01b0390931692612030565b60405180910390a46001820154600283015460038401546040517f11df92f10000000000000000000000000000000000000000000000000000000081526001600160a01b03808616946311df92f194610a2f946e5945535f4f525f4e4f5f515545525960881b9492938a93921691600401611f23565b602060405180830381600087803b158015610a4957600080fd5b505af1158015610a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a819190611c98565b5060048201541561058a5760018201546004808401546040517fad5a755a0000000000000000000000000000000000000000000000000000000081526001600160a01b0385169363ad5a755a93610aee936e5945535f4f525f4e4f5f515545525960881b93899201611f5f565b602060405180830381600087803b158015610b0857600080fd5b505af1158015610b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b409190611c98565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6e5945535f4f525f4e4f5f515545525960881b81565b610b8b600033610c39565b610ba75760405162461bcd60e51b815260040161049a9061208f565b610bb0816103c2565b610bcc5760405162461bcd60e51b815260040161049a9061222a565b6000818152600260205260409081902060058101805462ff000019166201000017905590517f6ded7250a9d5f79aef5add44600fc20a74a0af6f4730baa4fc4ab87bf484b81290610c1e908490611ea7565b60405180910390a15050565b6001546001600160a01b031681565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600260205260009081526040902080548190610c7d906129b1565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca9906129b1565b8015610cf65780601f10610ccb57610100808354040283529160200191610cf6565b820191906000526020600020905b815481529060010190602001808311610cd957829003601f168201915b50505060018401546002850154600386015460048701546005880154600690980154969793966001600160a01b0390931695509093509160ff8082169261010083048216926201000090049091169089565b610d518161138b565b610d6d5760405162461bcd60e51b815260040161049a9061264f565b6000818152600260205260409020600581015462010000900460ff1615610da65760405162461bcd60e51b815260040161049a906124db565b6000610db06115f8565b43600684015560018301546040517f5e9a79a90000000000000000000000000000000000000000000000000000000081529192506001600160a01b03831691635e9a79a991610e199130916e5945535f4f525f4e4f5f515545525960881b918890600401611e38565b602060405180830381600087803b158015610e3357600080fd5b505af1158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6b9190611c98565b5060405183907fd7e618e02913af732e9bbb7bad555e64867cf63058545af824177bede035337b90600090a2505050565b600081565b610eac600033610c39565b610ec85760405162461bcd60e51b815260040161049a9061272f565b610ed1836103c2565b610eed5760405162461bcd60e51b815260040161049a9061247e565b600083815260026020526040902060010154610f0d9062278d0090612937565b4211610f2b5760405162461bcd60e51b815260040161049a906125f2565b81816001818110610f4c57634e487b7160e01b600052603260045260246000fd5b9050602002013582826000818110610f7457634e487b7160e01b600052603260045260246000fd5b90506020020135610f859190612937565b600114610fa45760405162461bcd60e51b815260040161049a90612538565b60028114610fc45760405162461bcd60e51b815260040161049a90612538565b6000838152600260205260409081902060058101805461ff0019166101001790559051633124a62b60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c49298ac9061103490879087908790600401611eb0565b600060405180830381600087803b15801561104e57600080fd5b505af1158015611062573d6000803e3d6000fd5b5050604051600192508691507f5c3937ed929cd157b73b417381d743daf6e1ef65999e3ccb5dd64bc3247e28d690600090a350505050565b6110a5600033610c39565b6110c15760405162461bcd60e51b815260040161049a90612367565b6110ca816103c2565b6110e65760405162461bcd60e51b815260040161049a90612421565b6000818152600260205260409081902060058101805462ff00001916905590517f92d28918c5574e7fc0f4f948c39502682c81cfb4089b07b83f95b3264e5e5e0690610c1e908490611ea7565b62278d0081565b611143866103c2565b156111605760405162461bcd60e51b815260040161049a906127ea565b604080516101208101825286815260208082018790526001600160a01b038616828401526060820185905260808201849052600060a0830181905260c0830181905260e083018190526101008301819052898152600282529290922081518051929391926111d19284920190611920565b506020820151600182015560408201516002820180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909216919091179055606082015160038201556080820151600482015560a082015160058201805460c085015160e086015160ff199092169315159390931761ff00191661010093151584021762ff00001916620100009115159190910217905590910151600690910155600061128661168a565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081529091506001600160a01b0385169063095ea7b3906112d09084908790600401611e70565b602060405180830381600087803b1580156112ea57600080fd5b505af11580156112fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132291906119fb565b50867f5a6801fc8f8820ceb071609ea09438cbab61e56085a50d9a1e672d81aec0adda878787878760405161135b959493929190611f8f565b60405180910390a250505050505050565b611375826103d9565b6113818161057b61150b565b61058a8383611607565b6000611396826103c2565b6113a2575060006103bd565b6000828152600260205260409020600581015460ff166113c65760009150506103bd565b600581015460ff610100909104161515600114156113e85760009150506103bd565b6006810154156113fc5760009150506103bd565b60006114066115f8565b60018301546040517fbc58ccaa0000000000000000000000000000000000000000000000000000000081529192506001600160a01b0383169163bc58ccaa916114699130916e5945535f4f525f4e4f5f515545525960881b918890600401611e38565b60206040518083038186803b15801561148157600080fd5b505afa158015611495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b991906119fb565b949350505050565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b3390565b6115198282610c39565b6108d457611531816001600160a01b03166014611722565b61153c836020611722565b60405160200161154d929190611db7565b60408051601f198184030181529082905262461bcd60e51b825261049a9160040161207c565b61157d8282610c39565b6108d4576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556115b461150b565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061160261168a565b905090565b6116118282610c39565b156108d4576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916905561164661150b565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6001546040517faafd5e400000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063aafd5e40906116d290600401612201565b60206040518083038186803b1580156116ea57600080fd5b505afa1580156116fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160291906119df565b6060600061173183600261294f565b61173c906002612937565b67ffffffffffffffff81111561176257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561178c576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106117d157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061182a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061184e84600261294f565b611859906001612937565b90505b60018111156118fa577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106118a857634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106118cc57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936118f38161299a565b905061185c565b5083156119195760405162461bcd60e51b815260040161049a906120ec565b9392505050565b82805461192c906129b1565b90600052602060002090601f01602090048101928261194e5760008555611994565b82601f1061196757805160ff1916838001178555611994565b82800160010185558215611994579182015b82811115611994578251825591602001919060010190611979565b506119a09291506119a4565b5090565b5b808211156119a057600081556001016119a5565b80356103bd81612a18565b80516103bd81612a18565b805180151581146103bd57600080fd5b6000602082840312156119f0578081fd5b815161191981612a18565b600060208284031215611a0c578081fd5b611919826119cf565b600060208284031215611a26578081fd5b5035919050565b60008060408385031215611a3f578081fd5b823591506020830135611a5181612a18565b809150509250929050565b600080600060408486031215611a70578081fd5b83359250602084013567ffffffffffffffff80821115611a8e578283fd5b818601915086601f830112611aa1578283fd5b813581811115611aaf578384fd5b8760208083028501011115611ac2578384fd5b6020830194508093505050509250925092565b60008060008060008060c08789031215611aed578182fd5b8635955060208088013567ffffffffffffffff80821115611b0c578485fd5b818a0191508a601f830112611b1f578485fd5b813581811115611b3157611b31612a02565b611b43601f8201601f19168501612901565b91508082528b84828501011115611b58578586fd5b8084840185840137810190920184905250945060408701359350611b7e606088016119b9565b92506080870135915060a087013590509295509295509295565b600060208284031215611ba9578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611919578182fd5b6000610180808385031215611beb578182fd5b611bf481612901565b9050611bff836119c4565b8152611c0d602084016119c4565b6020820152611c1e604084016119c4565b6040820152611c2f606084016119cf565b6060820152611c40608084016119cf565b608082015260a0838101519082015260c0808401519082015260e08084015190820152610100808401519082015261012080840151908201526101408084015190820152610160928301519281019290925250919050565b600060208284031215611ca9578081fd5b5051919050565b6000815180845260208085019450808401835b83811015611cdf57815187529582019590820190600101611cc3565b509495945050505050565b60008151808452611d0281602086016020860161296e565b601f01601f19169290920160200192915050565b805460009060028104600180831680611d3057607f831692505b6020808410821415611d5057634e487b7160e01b86526022600452602486fd5b611d5a8489611ea7565b828015611d6e5760018114611d7f57611daa565b60ff19871682528282019750611daa565b611d888961292b565b60005b87811015611da457815484820152908601908401611d8b565b83019850505b5050505050505092915050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351611def81601785016020880161296e565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611e2c81602884016020880161296e565b01602801949350505050565b60006001600160a01b038616825284602083015283604083015260806060830152611e666080830184611d16565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b6000602082526119196020830184611cb0565b901515815260200190565b90815260200190565b6000848252604060208301528260408301527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115611eee578081fd5b6020830280856060850137919091016060019081529392505050565b6000838252604060208301526114b96040830184611cb0565b600086825285602083015260a06040830152611f4260a0830186611d16565b6001600160a01b0394909416606083015250608001529392505050565b600085825284602083015260806040830152611f7e6080830185611d16565b905082606083015295945050505050565b600060a08252611fa260a0830188611cea565b90508560208301526001600160a01b03851660408301528360608301528260808301529695505050505050565b6000610120808352611fe38184018d611cea565b602084019b909b5250506001600160a01b039790971660408801526060870195909552608086019390935290151560a0850152151560c0840152151560e083015261010090910152919050565b6000608082526120436080830187611d16565b6001600160a01b03959095166020830152506040810192909252606090910152919050565b6001600160a01b0391909116815260200190565b6000602082526119196020830184611cea565b60208082526037908201527f416461707465723a3a70617573655175657374696f6e3a2063616c6c6572206460408201527f6f6573206e6f7420686176652061646d696e20726f6c65000000000000000000606082015260800190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b60208082526042908201527f416461707465723a3a67657445787065637465645061796f7574733a2072657360408201527f6f6c7574696f6e4461746120686173206e6f74206265656e207265717565737460608201527f6564000000000000000000000000000000000000000000000000000000000000608082015260a00190565b6020808252602f908201527f416461707465723a3a7265706f72745061796f7574733a20496e76616c69642060408201527f7265736f6c7574696f6e20646174610000000000000000000000000000000000606082015260800190565b7f4f7074696d69737469634f7261636c6500000000000000000000000000000000815260200190565b60208082526035908201527f416461707465723a3a70617573655175657374696f6e3a207175657374696f6e60408201527f4944206973206e6f7420696e697469616c697a65640000000000000000000000606082015260800190565b6020808252602f908201527f416461707465723a3a67657445787065637465645061796f7574733a2051756560408201527f7374696f6e206973207061757365640000000000000000000000000000000000606082015260800190565b60208082526041908201527f416461707465723a3a726571756573745265736f6c7574696f6e446174613a2060408201527f5175657374696f6e206e6f7420726561647920746f206265207265736f6c766560608201527f6400000000000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526039908201527f416461707465723a3a756e50617573655175657374696f6e3a2063616c6c657260408201527f20646f6573206e6f7420686176652061646d696e20726f6c6500000000000000606082015260800190565b60208082526036908201527f416461707465723a3a67657445787065637465645061796f7574733a2071756560408201527f7374696f6e4944206973206e6f7420736574746c656400000000000000000000606082015260800190565b60208082526037908201527f416461707465723a3a756e50617573655175657374696f6e3a2071756573746960408201527f6f6e4944206973206e6f7420696e697469616c697a6564000000000000000000606082015260800190565b6020808252603e908201527f416461707465723a3a656d657267656e63795265706f72745061796f7574733a60408201527f207175657374696f6e4944206973206e6f7420696e697469616c697a65640000606082015260800190565b60208082526023908201527f416461707465723a3a736574746c653a205175657374696f6e2069732070617560408201527f7365640000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526037908201527f416461707465723a3a656d657267656e63795265706f72745061796f7574733a60408201527f207061796f757473206d7573742062652062696e617279000000000000000000606082015260800190565b6020808252603a908201527f416461707465723a3a67657445787065637465645061796f7574733a2071756560408201527f7374696f6e4944206973206e6f7420696e697469616c697a6564000000000000606082015260800190565b6020808252603d908201527f416461707465723a3a656d657267656e63795265706f72745061796f7574733a60408201527f2073616665747920706572696f6420686173206e6f7420706173736564000000606082015260800190565b60208082526036908201527f416461707465723a3a736574746c653a207175657374696f6e4944206973206e60408201527f6f7420726561647920746f20626520736574746c656400000000000000000000606082015260800190565b60208082526050908201527f416461707465723a3a7265706f72745061796f7574733a20417474656d70746960408201527f6e6720746f20736574746c6520616e64207265706f72745061796f757473206960608201527f6e207468652073616d6520626c6f636b00000000000000000000000000000000608082015260a00190565b602080825260409082018190527f416461707465723a3a656d657267656e63795265706f72745061796f7574733a908201527f2063616c6c657220646f6573206e6f7420686176652061646d696e20726f6c65606082015260800190565b6020808252603b908201527f416461707465723a3a67657445787065637465645061796f7574733a2071756560408201527f7374696f6e494420697320616c7265616479207265736f6c7665640000000000606082015260800190565b60208082526039908201527f416461707465723a3a696e697469616c697a655175657374696f6e3a2051756560408201527f7374696f6e20616c726561647920696e697469616c697a656400000000000000606082015260800190565b60208082526032908201527f416461707465723a3a726571756573745265736f6c7574696f6e446174613a2060408201527f5175657374696f6e206973207061757365640000000000000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b60405181810167ffffffffffffffff8111828210171561292357612923612a02565b604052919050565b60009081526020902090565b6000821982111561294a5761294a6129ec565b500190565b6000816000190483118215151615612969576129696129ec565b500290565b60005b83811015612989578181015183820152602001612971565b83811115610b405750506000910152565b6000816129a9576129a96129ec565b506000190190565b6002810460018216806129c557607f821691505b602082108114156129e657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612a2d57600080fd5b5056fea264697066735822122015d9619730bfd251a934996aa418bd58595284b4643153b49e26f0976aed0fbd64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "emergencyReportPayouts(bytes32,uint256[])": {
        "params": {
          "questionID": "- The unique questionID of the question"
        }
      },
      "getExpectedPayouts(bytes32)": {
        "params": {
          "questionID": "- The unique questionID of the question"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initializeQuestion(bytes32,bytes,uint256,address,uint256,uint256)": {
        "params": {
          "ancillaryData": "- Holds data used to resolve a question",
          "proposalBond": "- Additional bond required to be posted by a price proposer and disputer",
          "questionID": "- The unique questionID of the question",
          "resolutionTime": "- Timestamp at which the Adapter can resolve a question",
          "reward": "- Reward offered to a successful proposer",
          "rewardToken": "- ERC20 token address used for payment of rewards and fees"
        }
      },
      "pauseQuestion(bytes32)": {
        "params": {
          "questionID": "- The unique questionID of the question"
        }
      },
      "readyToRequestResolution(bytes32)": {
        "params": {
          "questionID": "- The unique questionID of the question"
        }
      },
      "readyToSettle(bytes32)": {
        "params": {
          "questionID": "- The unique questionID of the question"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "reportPayouts(bytes32)": {
        "params": {
          "questionID": "- The unique questionID of the question"
        }
      },
      "requestResolutionData(bytes32)": {
        "params": {
          "questionID": "- The unique questionID of the question"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "settle(bytes32)": {
        "params": {
          "questionID": "- The unique questionID of the question"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unPauseQuestion(bytes32)": {
        "params": {
          "questionID": "- The unique questionID of the question"
        }
      }
    },
    "title": "UmaConditionalTokensBinaryAdapter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "emergencyReportPayouts(bytes32,uint256[])": {
        "notice": "Allows an admin to report payouts in an emergency"
      },
      "getExpectedPayouts(bytes32)": {
        "notice": "Can be called by anyone to retrieve the expected payout of a settled question"
      },
      "initializeQuestion(bytes32,bytes,uint256,address,uint256,uint256)": {
        "notice": "Initializes a question on the Adapter to report on"
      },
      "pauseQuestion(bytes32)": {
        "notice": "Allows an admin to pause market resolution in an emergency"
      },
      "readyToRequestResolution(bytes32)": {
        "notice": "- Checks whether or not a question can start the resolution process"
      },
      "readyToSettle(bytes32)": {
        "notice": "Checks whether a questionID is ready to be settled"
      },
      "reportPayouts(bytes32)": {
        "notice": "Can be called by anyone to resolve a question"
      },
      "requestResolutionData(bytes32)": {
        "notice": "Called by anyone to request resolution data from the Optimistic Oracle"
      },
      "settle(bytes32)": {
        "notice": "Can be called by anyone to settle/finalize the price of a question"
      },
      "unPauseQuestion(bytes32)": {
        "notice": "Allows an admin to unpause market resolution in an emergency"
      }
    },
    "notice": "allows a condition to be resolved via UMA's Optimistic Oracle",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 1622,
        "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
        "label": "umaFinder",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(FinderInterface)2474"
      },
      {
        "astId": 1652,
        "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
        "label": "questions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(QuestionData)1647_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(FinderInterface)2474": {
        "encoding": "inplace",
        "label": "contract FinderInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(QuestionData)1647_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct UmaConditionalTokensBinaryAdapter.QuestionData)",
        "numberOfBytes": "32",
        "value": "t_struct(QuestionData)1647_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(QuestionData)1647_storage": {
        "encoding": "inplace",
        "label": "struct UmaConditionalTokensBinaryAdapter.QuestionData",
        "members": [
          {
            "astId": 1630,
            "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
            "label": "ancillaryData",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 1632,
            "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
            "label": "resolutionTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1634,
            "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
            "label": "rewardToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1636,
            "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
            "label": "reward",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1638,
            "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
            "label": "proposalBond",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1640,
            "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
            "label": "resolutionDataRequested",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 1642,
            "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
            "label": "resolved",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 1644,
            "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
            "label": "paused",
            "offset": 2,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 1646,
            "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
            "label": "settled",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}